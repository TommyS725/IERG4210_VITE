version: '3.8'
services:
  nginx:
    image: nginx:latest
    volumes:
       - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
       - ./server/images:/usr/share/nginx/html/images
    ports:
      - 3000:80
    depends_on:
      server:
        condition: service_healthy
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.compose
    volumes:
      - client:/app/dist

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.compose
    volumes:
      - admin:/app/dist

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        DB_URL: mysql://root:admin@db:3306/store
        REDIS_HOST: redis
    command: npm run setup:start
    environment:
      DB_URL: mysql://root:admin@db:3306/store
      REDIS_HOST: redis
      IS_DEV: 'true'
    volumes:
      - ./server/images:/app/images
      - client:/app/client
      - admin:/app/admin
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      frontend:
        condition: service_completed_successfully
      admin:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl" ,"localhost:8080"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure


  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: store
    volumes:
      - ./mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 3
    restart: on-failure
  
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 3
    restart: on-failure

volumes:
  client:
  admin:


